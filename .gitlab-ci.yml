default:
  image: $CI_REGISTRY_IMAGE:latest

variables:
  POSTGRES_DB: $POSTGRES_DB
  POSTGRES_USER: $POSTGRES_USER
  POSTGRES_PASSWORD: $POSTGRES_PASSWORD
  POSTGRES_HOST_AUTH_METHOD: trust

stages:
  - build
  - test

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .cache/pypoetry
    - .venv/

build-job:
  stage: build
  inherit:
    default: false
  image: docker
  services:
    - docker:dind
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER  $CI_REGISTRY --password-stdin
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE

pytest:
  stage: test
  needs:
    - ['build-job']
  services:
    - name: postgres:latest
      alias: database

  before_script:
    - apt-get update && apt-get install -y postgresql postgresql-client libpq-dev
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 'OK' AS status;"

  script:
    - poetry remove pytest
    - poetry add pytest
    - poetry run pytest --maxfail=1 --disable-warnings -v
