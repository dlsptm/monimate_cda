default:
  image: $CI_REGISTRY_IMAGE

variables:
  POSTGRES_DB: $POSTGRES_DB
  POSTGRES_USER: $POSTGRES_USER
  POSTGRES_PASSWORD: $POSTGRES_PASSWORD
  POSTGRES_HOST_AUTH_METHOD: trust
  PYTHONUNBUFFERED: "1"


stages:
  - build
  - setup-back
  - test
  - deploy

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - /root/.cache/pypoetry/virtualenvs
    - .venv/


before_script:
  - poetry install --no-root


build-job:
  stage: build
  inherit:
    default: false
  image: docker
  services:
    - docker:dind
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER  $CI_REGISTRY --password-stdin
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE


setup-back-job:
  stage: setup-back
  needs:
    - ["build-job"]
  script:
    - poetry config virtualenvs.create true
    - poetry config virtualenvs.in-project true
    - poetry install --no-root

pycs:
  stage: test
  needs:
    - ["setup-back-job"]
  script:
    - poetry run autopep8 --in-place --aggressive --recursive .
    - poetry run flake8 app/
    - poetry run black app/
    - poetry run isort app/


pystan:
  stage: test
  needs:
    - ["setup-back-job"]
  script:
    - poetry run mypy app/
    - poetry run pylint app/
    - poetry run bandit -r app/


pytest:
  stage: test
  services:
    - name: postgres:latest
      alias: database
  needs:
    - ["setup-back-job"]
  before_script:
    - apt-get update && apt-get install -y postgresql postgresql-client libpq-dev
    - until pg_isready -h postgres -p 5432 -U "$POSTGRES_USER"; do echo "Waiting for database..."; sleep 2; done
    - psql -h "database" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 'OK' AS status;"
    - poetry install --no-root

  script:
    - poetry run flask db upgrade
    - poetry run pytest -s --junitxml=results.xml  --verbose --disable-warnings


deploy:
  stage: deploy
  needs:
    - pytest
    - pycs
    - pystan
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest
    - docker run -d -p 9898:9898 --env-file .env $CI_REGISTRY_IMAGE:latest
